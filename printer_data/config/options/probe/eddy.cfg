# Configuration for Eddy USB probe. Adapted for SV08 mainline from
# https://github.com/bigtreetech/Eddy/blob/master/sample-bigtreetech-eddy-homing.cfg
# (i.e., using Eddy for both bed mesh and probing, but without using the beta z-offset support).
#
# Follow the guide at https://github.com/bigtreetech/Eddy, but skipping everything
# about configuration except setting the serial path below. (In other words, do only
# mounting, firmware compilation and calibration.) You can find a mount # that allows you
# to fit the Eddy under the regular SV08 shroud (instead of the old probe, in the same place)
# at https://www.printables.com/model/968900-sovol-sv08-btt-eddy-mount.
# If you are connecting the probe in some other way, adjust x_offset and y_offset below
# (see the BTT guide for information).
#
# TODO: It would be nice to use the physical probe to automate the setup completely,
# but that probably requires a fair bit of scripting.

[mcu eddy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_5044340310CE811C-if00
restart_method: command

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu
sensor_mcu: eddy
min_temp: 10
max_temp: 100

[probe_eddy_current btt_eddy]
sensor_type: ldc1612
z_offset: 2.5
i2c_mcu: eddy
i2c_bus: i2c0f
x_offset: -16
y_offset: 11.5

[temperature_probe btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26
horizontal_move_z: 2

[bed_mesh]
horizontal_move_z: 2
speed: 200
mesh_min: 15, 15
mesh_max: 330, 330
probe_count: 25, 25
algorithm: bicubic
#scan_overshoot: 8  #uncomment this section if you still have room left over on the X axis for some scan overshoot to product smoother movements and more accurate scanning. Uncommenting this should be fine if you are using a standard voron mount.

###############################Macros and related################################
# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[delayed_gcode RESTORE_PROBE_OFFSET]
initial_duration: 1.
gcode:
  {% set svv = printer.save_variables.variables %}
  {% if not printer["gcode_macro SET_GCODE_OFFSET"].restored %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ svv.nvm_offset|default(0) }
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=True
  {% endif %}

[homing_override]
gcode:
  # Move 5 up, just in case (this is our safety zhop, this needs 'set_position_z: 0' below)
  G91 ; set relative positioning
  G0 Z5 F1000 ; 5 up zhop
  {% if not rawparams or 'Y' in rawparams %}
    {action_respond_info('Homing Y')}
    G28 Y
    G90 ; set absolute positioning
    G0 Y177.5 F6000 ; return to center
    M400 ; Wait for move to finish
  {% endif %}
  {% if not rawparams or 'X' in rawparams %}
    {action_respond_info('Homing X')}
    G28 X
    G90 ; set absolute positioning
    G0 X177.5 F6000 ; return to center
    M400 ; Wait for move to finish
  {% endif %}
  {% if not rawparams or 'Z' in rawparams %}
    {action_respond_info('Homing Z')}
    G90 ; set absolute positioning
    G0 X177.5 Y177.5 F6000 ; Move to the center before Z homing
    G91 ; set relative positioning
    G28 Z
    G91 ; set relative positioning
    G0 Z10 F1000 ; 10mm zhop before probe
    PROBE
    SET_Z_FROM_PROBE
    G0 Z5 F1000 ; 5mm up
    M400 ; Wait for move to finish
  {% endif %}
  G90 ; set absolute positioning
axes: xyz
set_position_z: 0 # This forces the z position to be at 0 when we start homing, so we can move the Z up before homing.if not, the printer will take z position regardless of the current x and y position.

# Uncomment this if you are using Eddy as the probe AND the homing endstop
# Take note of the lines that should only be used if you have a KNOMI installed.
;[gcode_macro G28]
;rename_existing: G28.1
;gcode:
;  #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg
;  G28.1 {rawparams}
;  {% if not rawparams or (rawparams and 'Z' in rawparams) %}
;    PROBE
;    SET_Z_FROM_PROBE
;  {% endif %}
;  #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg



# Uncomment this if you are using Eddy as the probe AND the homing endstop
[gcode_macro SET_Z_FROM_PROBE]
gcode:
    {% set cf = printer.configfile.settings %}
    SET_GCODE_OFFSET_ORIG Z={printer.probe.last_z_result - cf['probe_eddy_current btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
    G90
    ;G1 Z10
    ;G1 Z{cf.safe_z_home.z_hop}


# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[gcode_macro Z_OFFSET_APPLY_PROBE]
rename_existing: Z_OFFSET_APPLY_PROBE_ORIG
gcode:
  SAVE_VARIABLE VARIABLE=nvm_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset }



# Uncomment the lines in this macro if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False  # Mark whether the var has been restored from NVM
variable_runtime_offset: 0
gcode:
  {% if params.Z_ADJUST %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + params.Z_ADJUST|float }
  {% endif %}
  {% if params.Z %} 
    {% set paramList = rawparams.split() %}
    {% for i in range(paramList|length) %}
      {% if paramList[i]=="Z=0" %}
        {% set temp=paramList.pop(i) %}
        {% set temp="Z_ADJUST=" + (-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)|string %}
        {% if paramList.append(temp) %}{% endif %}
      {% endif %}
    {% endfor %}
    {% set rawparams=paramList|join(' ') %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0
  {% endif %}
  SET_GCODE_OFFSET_ORIG { rawparams }



# This macro automates a lot of the frequency mapping process and simplifies the steps significantly.
[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
gcode:
  BED_MESH_CLEAR
  G28 Y
  G28 X
  G90 # Abs positioning
  G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F6000
  {% if 'z' not in printer.toolhead.homed_axes %}
    SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z-1 } # Allows the user to work it down until it touches.
  {% endif %}
  PROBE_EDDY_CURRENT_CALIBRATE CHIP=btt_eddy


#This macro is optional but useful if you want to run a rapid scan before each print. Simply uncomment it and add BED_MESH_SCAN to your print start code.
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BTT_BED_MESH_CALIBRATE
gcode:
  BTT_BED_MESH_CALIBRATE METHOD=rapid_scan
